include ../../templates/common.jade

doctype html
html
  head
    include ../../templates/head
    include ../../templates/explanation-head
    link(rel="stylesheet" href= path + "/style.css" type="text/css")
  body(ng-app="myApp" ng-controller="MainCtrl")
    section.menu
      a(href=basepath) Back
    section.title
      .title-region
        h1.title !{title}
        h3.by-line !{subtitle}
      +share
      +authors
      p Principal component analysis (PCA) is a technique used to emphasize variation and bring out strong patterns in a dataset.  It's often used to make data easy to explore and visualize.
      h1 2D example
      p First, consider a dataset in only two dimensions, like (height, weight). This dataset can be plotted as points in a plane. But if we want to tease out variation, PCA finds a new coordinate system in which every point has a new (x,y) value. The axes don't actually mean anything physical; they're combinations of height and weight called "principal components" that are chosen to give one axes lots of variation.
      p Drag the points around in the following visualization to see how they effect the PC coordinate system.
      div(style="text-align: center; width: 100%")
        pca-d2
      div(style="text-align: center; width: 100%")
        div(style="width: 50%; float: left;padding: 0px 20px 0 20px; text-align: left")
          :markdown
            PCA is useful for eliminating dimensions. Below, we've plotted the data along a pair of lines: one composed of the x-values and another of the y-values.

        div(style="width: 50%; float: left;padding: 0px 20px 0 20px;text-align: left")
          p If we're going to only see the data along one dimension, though, it might be better to make that dimension the principal component with most variation. We don't lose much by dropping 
            span(style="color:#2ecc71") PC2 
            | since it contributes the least to the variation in the data set.
        pca-d1
    section
      h1 3D example
      P With three dimensions, PCA is more useful, because it's hard to see through a cloud of data. In the example below, the original data are plotted in 3D, but you can project the data into 2D through a transformation no different than finding a camera angle: rotate the axes to find the best angle. To see the "official" PCA transformation, click the "Show PCA" button. The PCA transformation ensures that the horizontal axis PC1 has the most variation, the vertical axis PC2 the second-most, and a third axis PC3 the least. Obviously, PC3 is the one we drop.
      pca-three-plot(rot="rotXY")
      div(style="text-align: center")
        button.btn(ng-click="showPCAThree()") show PCA
        button.btn(ng-click="resetPCAThree()") reset
    section
      h1 Eating in the UK (a 17D example)
      div(style="text-align: left; width: 40%; display: block; float: left; clear: both")
        small Original example from Mark Richardson's class notes 
          a(href="http://people.maths.ox.ac.uk/richardsonm/SignalProcPCA.pdf") Principal Component Analysis
        p What if our data have way more than 3-dimensions? Like, <b>17</b> dimensions?! In the table is the average consumption of 17 types of food in grams per person per week for every country in the UK. 
        p The table shows some interesting variations across different food types, but overall differences aren't so notable. Let's see if PCA can eliminate dimensions to emphasize how countries differ.
      div(style="text-align: center; width: 60%; display: block; float: left")
        defra-table
      div(style="clear:both")
      p Here's the plot of the data along the first principal component. Already we can see something is different about Northern Ireland.
      div(style="text-align: center; width: 100%; display: block;")
        defra-d1
      p Now, see the first and second principal components, we see Northern Ireland a major outlier. Once we go back and look at the data in the table, this makes sense: the Northern Irish eat way more grams of fresh potatoes and way fewer of fresh fruits, cheese, fish and alcoholic drinks. It's a good sign that structure we've visualized reflects a big fact of real-world geography: Northern Ireland is the only of the four countries not on the island of Great Britain. (If you're confused about the differences among England, the UK and Great Britain, see: <a href="https://www.youtube.com/watch?v=rNu8XDBSn10">this video</a>.)
      br
      br
      div(style="text-align: center; width: 100%; display: block;")
        defra-d2
      br
      br
    if !dev
      +footer
      +disqus

  script(type="x-shader/x-vertex" id="vertexshader").
    // attribute vec3 color;
    uniform float pointSize;
    uniform vec3 color;
    uniform float alpha;
    uniform int shouldResize;
    varying vec4 vColor;
    void main() {
      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
      if (shouldResize == 1) {
        gl_PointSize = pointSize * ( mvPosition.z + 30.0) / 10.0 + 10.0;
        // gl_PointSize = pointSize;
      } else {
        gl_PointSize = pointSize;
      }
      gl_Position = projectionMatrix * mvPosition;
      if (shouldResize == 1) {
        vColor = vec4(color, ( mvPosition.z + 30.0) / 10.0 + 0.0);
        // vColor = vec4(color, 0.8);
      } else {
        vColor = vec4(color, alpha);
      }
    }

  script(type="x-shader/x-fragment" id="fragmentshader").
    varying vec4 vColor;
    void main() {
      float f = 0.5;
      // vec2 pos = mod(gl_FragCoord.xy, vec2(50.0)) - vec2(25.0);
      float d = abs(distance(gl_PointCoord - f, vec2(0.0, 0.0) ) );
      if(d < f) {
        gl_FragColor = vColor;
      } else {
        discard;
      }
    }


  script(src=basepath + "scripts/three.js" charset="utf-8")
  script(src=basepath + "scripts/OrthographicTrackballControls.js" charset="utf-8")
  script(src=basepath + "scripts/numeric.js" charset="utf-8")
  script(src=path + "script.js")